on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: release all os â€” mac signed & notarized, windows, linux

permissions:
  contents: write # Required to create releases and upload assets

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create GitHub Release (draft)
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ github.ref_name }}"
          echo "Ensuring draft release for tag: $tag"
          if gh release view "$tag" >/dev/null 2>&1; then
            echo "Release $tag already exists, skipping creation"
          else
            gh release create "$tag" \
              --title "$tag" \
              --draft \
              --notes ""
          fi

  release:
    name: Release
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: 'dist/{*.AppImage,*.rpm,*.deb,*.yml}'
          - os: windows-latest
            artifact_name: 'dist/{*.msi,*.exe,*.blockmap,*.yml}'
          - os: macos-latest
            artifact_name: 'dist/{*.dmg,*.blockmap,*.yml}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: '23'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: pnpm install in ./src/client-viewer
        run: |
          cd ./src/client-viewer
          pnpm install

      - name: pnpm install in ./
        run: pnpm install

      - name: Create .env file for client-viewer with Google Analytics tag (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          echo "VITE_CLIENT_VIEWER_GA_TAG=${{ secrets.CLIENT_VIEWER_GA_TAG_MACOS }}" > ./src/client-viewer/.env

      - name: Create .env file for client-viewer with Google Analytics tag (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "VITE_CLIENT_VIEWER_GA_TAG=${{ secrets.CLIENT_VIEWER_GA_TAG_WINDOWS }}" > ./src/client-viewer/.env

      - name: Create .env file for client-viewer with Google Analytics tag (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "VITE_CLIENT_VIEWER_GA_TAG=${{ secrets.CLIENT_VIEWER_GA_TAG_LINUX }}" > ./src/client-viewer/.env

      - name: pnpm build on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm build:win

      - name: pnpm build on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # certificate for signing (base64-encoded .p12) and its password
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
        run: pnpm build:mac

      - name: pnpm build on Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm build:linux

      - name: Notarize and staple macOS DMG
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          shopt -s nullglob
          for dmg in dist/*.dmg; do
            echo "Submitting $dmg for notarization"
            xcrun notarytool submit "$dmg" \
              --apple-id "$APPLE_ID" \
              --team-id "$APPLE_TEAM_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --wait
            echo "Stapling ticket to $dmg"
            xcrun stapler staple "$dmg"
          done

      - name: Upload binaries to release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ${{ matrix.artifact_name }}
          tags: true
          draft: true
